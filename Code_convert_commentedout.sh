#!/bin/ksh
#
#
trap '' 2
#
#
##VARIABLES
FCMD="/backups/mon_tribe/addmon/cmd"
FTEMP="/backups/mon_tribe/addmon/tmp"
FLOG="/backups/mon_tribe/addmon/log"
SFILE="/backups/mon_tribe/addmon/file"
FSQL="/backups/mon_tribe/addmon/send/"$LOGIN"_sql_`date +%Y-%m-%d-%H-%MM`.sh"
FFLOAT="/backups/mon_tribe/addmon/tmp/"$LOGIN"_float_`date +%Y-%m-%d-%H-%MM`.sh"
DT=`date +%Y-%m-%d`

###MAKE A DEVICE DECISION
# The function below verifies if the server name was add with FQDN or short name, it is also necessary to convert the inserted name to lower case, because DB2 makes this differentiation, this will also call the # function "NAME_RM" that verifies that what was typed is valid and after that call the function "ADD_LDS"

CHK_LDS_RM ()
{

LDS_NAME=`echo $SERVER_VIT|tr [A-Z] [a-z]|sed 's/\a[a-z]{3,}/\u&/g'`

echo $LDS_NAME|grep .com >/dev/null 2>&1

if [[ $? != 0 ]]; then
   clear
echo
    printf "$SERVER_VIT doesn't seem a full name. Would you like to re-type? [Y/N]: " && read OPT

    case $OPT in
        y|Y) clear;NAME_RM;clear;CHK_LDS_RM;;
        n|N) clear;NICKNAME=`echo $LDS_NAME |cut -d "." -f1` && ADD_LDS;;
        *) clear;printf "Invalid option <<Press Enter and Try again>>";read;clear;NAME_RM;;
    esac

else 
     NICKNAME=`echo $LDS_NAME |cut -d "." -f1` && ADD_LDS
fi


}


NAME_RM ()
{
unset SERVER_VIT
echo
printf "enter the device name : " && read SERVER_VIT
rep=`echo $SERVER_VIT |cut -d "." -f1`
if [[ -z $SERVER_VIT ]]
    then
        read -p "Please enter a valid value <<Press Enter>>";clear;NAME_RM
fi
}

###Function in order to make a decision before creating a filter

FL_NAME_RM ()
{

unset OPT
echo
printf "Before creating a filter, make sure it already exists. [Continue = Y] [Check = N]: " && read OPT

    case $OPT in
        y|Y) clear;ADD_FILTER_RM;;
        n|N) clear;FIND_FILTER_RM;;
        *) clear;printf "Invalid option <<Press Enter and Try again>>";read;clear;FL_NAME_RM;;
    esac
}

###QUERY FIND DEVICE
# The function below is to verify that the device already exists in the database (always remember to convert the letter to lower case)

CHK_NAME ()
{

LDS_NAME=`echo $SERVER_VIT|tr [A-Z] [a-z]|sed 's/\a[a-z]{3,}/\u&/g'`

    db2 "CONNECT TO ServerFire01:5000:BSMA USER db2inst1 USING mypw01"
    db2 "SET SCHEMA=DB2LDS"
    db2 -x \"export to $FTEMP/"$LOGIN"_"$rep"_sel_$DT.out of del SELECT RESOURCEID,SUBACCOUNT FROM COMPUTERSYSTEM WHERE RESOURCEID LIKE '$LDS_NAME%'\"
    db2 "CONNECT RESET"
    
if [[ -s $FTEMP/"$LOGIN"_"$rep"_sel_$DT.out ]] 
then
echo
        echo "...............Server $SERVER_VIT already exists in LDS............."
        echo
        echo "--------------------Server--|--Queue------------------------"
        cat $FTEMP/"$LOGIN"_"$rep"_sel_$DT.out|sed 's/,/ | /g'|sed 's/"//g'|pg
        
else
echo
        printf "Server $LDS_NAME does not exist in LDS...\n\n"
        
        
fi

}

###ADD DEVICE
# This function is in order to add a new device to the database. (always remember to convert the letter to lower case)

ADD_LDS ()
{
LDS_NAME=`echo $SERVER_VIT|tr [A-Z] [a-z]|sed 's/\a[a-z]{3,}/\u&/g'`

    db2 "CONNECT TO ServerFire01:5000:BSMA USER db2inst1 USING mypw01"
    db2 "SET SCHEMA=DB2LDS"
    db2 -x \"export to $FTEMP/"$LOGIN"_"$rep"_sel_$DT.out of del SELECT RESOURCEID,SUBACCOUNT FROM COMPUTERSYSTEM WHERE RESOURCEID LIKE '$LDS_NAME%'\"
    db2 "CONNECT RESET" 

# Checks if the file generated by the export has content, if it has content, calls the next functions SCCDQ_RM, LVL_LDS and GEO_LDS in order to complete the insert db2 query.
# there are two db2 INSERT one for each table 

if [[ -s $FTEMP/"$LOGIN"_"$rep"_sel_$DT.out ]] 
then
echo
        echo "...............Server $SERVER_VIT already exists in LDS............."
        echo
        echo "--------------------Server--|--Queue------------------------"
        cat $FTEMP/"$LOGIN"_"$rep"_sel_$DT.out|sed 's/,/ | /g'|sed 's/"//g'
        
else
        SCCDQ_RM
echo 
        LVL_LDS
echo 
        GEO_LDS

LDS_NAME=`echo $SERVER_VIT|tr [A-Z] [a-z]|sed 's/\a[a-z]{3,}/\u&/g'`

    db2 "CONNECT TO ServerFire01:5000:BSMA USER db2inst1 USING mypw01"
    db2 "SET SCHEMA=DB2LDS"
    db2 -x \"INSERT INTO COMPUTERSYSTEM (RESOURCEID,CICLASS,OSRUNNING,FQDN,SUPPORTORG,SUBACCOUNT,CUSTOMERCODE,COUNTRYCODE,UPDATEORIGIN,LASTSAVEDDATE,RESOURCETYPE,RESOURCEUSAGE,IBMMANAGED) VALUES ('$LDS_NAME','ComputerSystem','UNK','$LDS_NAME','itm_s1','$SRVLV-$SCCDQ','$GCUST','',1,'`date +%Y-%m-%d`',1,'P',3)\"
    db2 -x \"INSERT INTO RIDALIAS (ALIAS,RESOURCEID,LASTSAVEDDATE,UPDATEORIGIN) VALUES ('$NICKNAME','$LDS_NAME','`date +%Y-%m-%d`',1)\"
    db2 "CONNECT RESET"

fi
}

###SCCD QUEUE
#Checks if queue name is less than 24 characters for the insert

SCCDQ_RM ()
{
unset SCCDQ1
echo
printf "enter the Queue name : "
        read SCCDQ1
        if [[ -z $SCCDQ1 ]]
          then
        echo;echo "Please enter a valid value <<Press Enter>>";read x
	clear;SCCDQ_RM
           elif [ ${#SCCDQ1} -gt 24 ]
             then
           echo;echo "The queue name must not be greater than 24 characters <<Press Enter>>";read x
           clear;SCCDQ_RM
        fi
        unset SCCDQ
        SCCDQ=`echo $SCCDQ1|tr [a-z] [A-Z]|sed 's/\a[a-z]{3,}/\u&/g'`
}

###DEVICE LEVEL
#Check the device level for the insert

LVL_LDS ()
{
echo
printf "enter Server level (Gold, Silver, Bronze) : "
        read SRVLV
        case $SRVLV in

                Gold|gold|GOLD ) SRVLV="Gold" ;;
                Silver|silver|SILVER ) SRVLV="Silver" ;; 
                Bronze|bronze|BRONZE ) SRVLV="Bronze" ;;
                * ) clear;printf "Invalid option <<Press Enter and Try again>>";read;clear;LVL_LDS;;
                
        esac
TKT_ACT_RM
}

###GEOGRAPHY CUSTOMER
#Check the cutomer geografry for the insert

GEO_LDS ()
{
echo
 printf "enter customer geography (US,LA,CA,AP,JP,EMEA) name : "
        read GCUST
        case $GCUST in

                US|us|Us ) GCUST="igu";clear ;;
                LA|la|La ) GCUST="igl";clear ;; 
                CA|ca|Ca ) GCUST="chs";clear ;;
                AP|ap|Ap ) GCUST="igp";clear ;;
                JP|jp|Jp ) GCUST="igj";clear ;;
                EMEA|emea|Emea )
                  if [[ $LDS_NAME == *".ahe."* ]]; then
                         GCUST="ehe"
                     else
                         GCUST="ige"
                     fi ;;
                * ) clear;printf "Invalid option <<Press Enter and Try again>>";read;clear;GEO_LDS;;
                                
        esac
TKT_ACT_RM
}

###FILTER ACTION
#Decide which ticket action to use for the insert

TKT_ACT_RM ()
{

if [[ $GCUST == "igu" ]] && [[ $SRVLV == "Bronze" ]]; then
   TKACT_RM=70
fi
if [[ $GCUST == "igu" ]] && [[ $SRVLV == "Silver" ]]; then
   TKACT_RM=53
fi
if [[ $GCUST == "igu" ]] && [[ $SRVLV == "Gold" ]]; then
   TKACT_RM=1
fi
if [[ $GCUST == "chs" ]]; then
   TKACT_RM=135
fi
if [[ $GCUST == "igl" ]] && [[ $SRVLV == "Bronze" ]]; then
   TKACT_RM=115
fi
if [[ $GCUST == "igl" ]] && [[ $SRVLV == "Silver" ]]; then
   TKACT_RM=115
fi
if [[ $GCUST == "igl" ]] && [[ $SRVLV == "Gold" ]]; then
   TKACT_RM=110
fi
if [[ $GCUST == "ige" ]] && [[ $SRVLV == "Bronze" ]]; then
   TKACT_RM=252
fi
if [[ $GCUST == "ige" ]] && [[ $SRVLV == "Silver" ]]; then
   TKACT_RM=112
fi
if [[ $GCUST == "ige" ]] && [[ $SRVLV == "Gold" ]]; then
   TKACT_RM=133
fi
if [[ $GCUST == "igj" ]] && [[ $SRVLV == "Bronze" ]]; then
   TKACT_RM=207
fi
if [[ $GCUST == "igj" ]] && [[ $SRVLV == "Silver" ]]; then
   TKACT_RM=113
fi
if [[ $GCUST == "igj" ]] && [[ $SRVLV == "Gold" ]]; then
   TKACT_RM=205
fi
if [[ $GCUST == "igp" ]] && [[ $SRVLV == "Bronze" ]]; then
   TKACT_RM=231
fi
if [[ $GCUST == "igp" ]] && [[ $SRVLV == "Silver" ]]; then
   TKACT_RM=114
fi
if [[ $GCUST == "igp" ]] && [[ $SRVLV == "Gold" ]]; then
   TKACT_RM=228
fi

echo

}

###FIND LDS FILTER
#Lists the filter data if it exists or informs that the filter does not exist.

FIND_FILTER_RM ()
{
SCCDQ_RM

    db2 "CONNECT TO ServerFire01:5000:BSMA USER db2inst1 USING mypw01"
    db2 "SET SCHEMA=DB2LDS"
    db2 -x \"export to $FTEMP/"$LOGIN"_"$SCCDQ"_selrep_`date +%Y-%m-%d`.out of del SELECT FILTERNAME,SUBACCOUNT,LOCATION,CUSTOMERCODE,TICKETGROUP FROM AUTOMATIONFILTERS WHERE SUBACCOUNT LIKE '%$SCCDQ%' OR LOCATION LIKE '%$SCCDQ%'\" >$FTEMP/"$LOGIN"_"$SCCDQ"_selrep_`date +%Y-%m-%d`.out
    db2 "CONNECT RESET"
    
if [[ -s $FTEMP/"$LOGIN"_"$SCCDQ"_selrep_`date +%Y-%m-%d`.out ]] 
then

echo  
        echo "    FILTER NAME     | O.S. CRITERIA | MID CRITERIA | CC CRITERIA | TICKET QUEUE "
        echo "-------------------------------------------------------------------------------------"
        cat $FTEMP/"$LOGIN"_"$SCCDQ"_selrep_`date +%Y-%m-%d`.out|sed 's/,/ | /g'|sed 's/"//g'|pg
        
else
echo 
        printf "Filter for queue $SCCDQ does not exist in LDS...\n\n"
echo
        printf " >>> Press <Enter> to continue <<< ";read x;clear

fi

}

###ADD LDS FILTER

ADD_FILTER_RM ()
{
        SCCDQ_RM
echo 
        LVL_LDS
echo 
        GEO_LDS

	TKT_ACT_RM

    db2 "CONNECT TO ServerFire01:5000:BSMA USER db2inst1 USING mypw01"
    db2 "SET SCHEMA=DB2LDS"
    db2 -x \"INSERT into AUTOMATIONFILTERS (CUSTOMERCODE,FILTERNAME,FILTERDESC,FILTERSTATE,FILTERWEIGHT,SUBACCOUNT,TICKETGROUP,TICKETACTIONID,IBMMANAGED) VALUES ('"$GCUST"','"$SCCDQ"-"$SRVLV"_S1','"$SCCDQ"-"$SRVLV"_ITM_S1','0','110','"$SRVLV"-"$SCCDQ"','"$SCCDQ"','"$TKACT_RM"','3')\"
    db2 "CONNECT RESET"

}

#The "FILEMLDS" function checks if a file exists and teaches how to prepare a file for the "SCCDFILE" function which will make multiple "INSERTS" in db2.
#It is one of the prerequisites, call the "SCCDQ_RM" function to indicate what the queue name for these multiple "INSERTS"

FILEMLDS ()
{

clear
echo
echo "\033[01;34;40m ************************************************  A T T E N T I O N  ************************************************ "; tput sgr0
echo
echo
echo "\033[01;34;40m                                 The fields of the file must be separated by commas              "; tput sgr0
echo
echo "\033[01;34;40m                                     consider this example: device.com, US, Gold                 "; tput sgr0
echo
echo "\033[01;34;40m                     The file should be located in the directory: $SFILE "; tput sgr0
echo
unset OPTFILE
printf "enter the file name : " && read OPTFILE
if [ -z "$OPTFILE" ];then
   printf "Please enter a file name <<Press Enter>>";read x;FILEMLDS
else
     if [ -e "$SFILE/$OPTFILE" ] ; then

        SCCDQ_RM;SCCDFILE

     else
        printf "Please enter a valid file name <<Press Enter>>";read x;FILEMLDS
     fi  
fi

}

#ADD MULTIPLE DEVICES
#The function below can add multiple devices at a single time through a file. The arguments added to the file must be comma-separated.

SCCDFILE ()
{

executionLog="./logs/$SCCDQ-`date +%Y-%m-%d`.log"
#Creating executionLog
echo "" > $executionLog

file="$OPTFILE"
pathTMP="/backups/mon_tribe/addmon/tmp"

db2 "CONNECT TO ServerFire01:5000:BSMA USER db2inst1 USING mypw01"
db2 "SET SCHEMA=DB2LDS"

rowCount=0

#Execute a SQL statement for each server in the file
while read line
do
    rowCount=$((rowCount+1))
    echo "################################################################################################" >> $executionLog
    echo "# PROCESSING ROW$rowCount ---> ${line} : " >> $executionLog

    resourceId=`echo $line |cut -d, -f1`
    Geography=`echo $line |cut -d, -f2`
    SupportLevel=`echo $line |cut -d, -f3`

    # Setting bash to case insensitive
    shopt -s nocasematch

    if [[ $SupportLevel == "Gold" ]]; then
        SupportLevel="Gold-"
    elif [[ $SupportLevel == "Silver" ]]; then
        SupportLevel="Silver-"
    elif [[ $SupportLevel == "Bronze" ]]; then
        SupportLevel="Bronze-"
    else
        echo "#ROW$rowCount# ERROR --> Support Level not valid: ${SupportLevel} " >> $executionLog
        continue #jump to next iteration
    fi

    # Reverting bash configuration
    shopt -u nocasematch

    echo "#ROW$rowCount# SELECT to check if FQDN is set as a ResourceId" >> $executionLog
    db2 -x "export to "${pathTMP}${resourceId}".del of del SELECT RESOURCEID FROM COMPUTERSYSTEM WHERE LOWER(RESOURCEID) = LOWER('"${resourceId}"')" >> $executionLog

    if [ -s "${pathTMP}${resourceId}.del" ]
    then #FQDN found as a ResourceId

        echo "#ROW$rowCount# ResourceId found. Running UPDATE using FQDN as ResourceId" >> $executionLog
        db2 -x "UPDATE COMPUTERSYSTEM SET SUBACCOUNT = '"$SupportLevel$SCCDQ"', SUPPORTORG = 'squad', RESOURCETYPE = 1, LIFECYCLESTATE = '19', COMPONENTTYPE = default, COMPONENT = default, SUBCOMPONENT = default, IBMMANAGED = 3, RESOURCEUSAGE = 'P' WHERE LOWER(RESOURCEID) = LOWER('"${resourceId}"')" >> $executionLog
    else #FQDN not found as a ResourceId
        rm -f "${pathTMP}${resourceId}.del"
        shortname=`echo $resourceId |cut -d "." -f1`
        echo "#ROW$rowCount# FQDN not found in LDS. Searching for shortname: $shortname" >> $executionLog
        db2 -x "export to "${pathTMP}${shortname}".del of del SELECT RESOURCEID FROM COMPUTERSYSTEM WHERE LOWER(RESOURCEID) = LOWER('"${shortname}"')" >> $executionLog

        if [ -s "${pathTMP}${shortname}.del" ]
        then
            echo "#ROW$rowCount# ResourceId found. Running UPDATE using shortname as ResourceId" >> $executionLog
            db2 -x "UPDATE COMPUTERSYSTEM SET SUBACCOUNT = '"$SupportLevel$SCCDQ"', SUPPORTORG = 'squad', RESOURCETYPE = 1, LIFECYCLESTATE = '19', COMPONENTTYPE = default, COMPONENT = default, SUBCOMPONENT = default, IBMMANAGED = 3, RESOURCEUSAGE = 'P' WHERE LOWER(RESOURCEID) = LOWER('"${shortname}"')" >> $executionLog
        else
            echo "#ROW$rowCount# Shortname not found in LDS. INSERT will be executed." >> $executionLog

            # Setting bash to case insensitive
            shopt -s nocasematch

            # Turn Geography into valid CustomerCode
            case "$Geography" in
                US)
                     Geography="igu"
                ;;
                LA)
                     Geography="igl"
                ;;
                CA)
                     Geography="chs"
                ;;
                AP)
                     Geography="igp"
                ;;
                JP)
                     Geography="igj"
                ;;
                EMEA)
                     if [[ $resourceId == *".ahe."* ]]; then
                         Geography="ehe"
                     else
                         Geography="ige"
                     fi
                ;;
                *)
                     echo "#ROW$rowCount# ERROR --> INSERT aborted.Provided Geography code is not valid: $Geography" >> $executionLog
                     echo "#ROW$rowCount# ERROR --> Accepted Geography codes: US | LA |CA | AP | EMEA | JP" >> $executionLog
                     continue
                ;;
           esac

            # Reverting bash configuration
            shopt -u nocasematch

                db2 -x "INSERT INTO COMPUTERSYSTEM (RESOURCEID,CICLASS,OSRUNNING,FQDN,SUPPORTORG,SUBACCOUNT,CUSTOMERCODE,COUNTRYCODE,UPDATEORIGIN,LASTSAVEDDATE,RESOURCETYPE,RESOURCEUSAGE,IBMMANAGED) VALUES ('"$resourceId"','ComputerSystem','UNK','"$resourceId"','squad','"$SupportLevel$SCCDQ"','"$Geography"','',1,'`date +%Y-%m-%d`',1,'P',3)" >> $executionLog

                echo "#ROW$rowCount# ResourceId INSERT done." >> $executionLog
                echo "#ROW$rowCount# Inserting shortname as an alias. " >> $executionLog

                db2 -x "INSERT INTO RIDALIAS (ALIAS,RESOURCEID,LASTSAVEDDATE,UPDATEORIGIN) VALUES ('"$shortname"','"$resourceId"','`date +%Y-%m-%d`',1)" >> $executionLog

                echo "#ROW$rowCount# Alias INSERT done. " >> $executionLog

        fi
    fi


done < "$file"

# Summary of SQL and error messages thrown by the script
echo "################################################################################################" >> $executionLog
echo "################################### SCRIPT EXECUTION REPORT ####################################" >> $executionLog
echo "# SQL OUTPUT RESUME:" >> $executionLog
grep SQL $executionLog |sort -u >> $executionLog
echo "################################################################################################" >> $executionLog
echo "# SCRIPT EXECUTION ISSUES (if any):" >> $executionLog
grep ERROR $executionLog >> $executionLog
echo "#"

db2 "CONNECT RESET"


#Remove temp files
rm ${pathTMP}* 
       
     else
        printf "Please enter a valid file name <<Press Enter>>";read x;FILEMLDS
     fi  
fi



}

 
CHECKERR ()
{
executionErr="/backups/mon_tribe/addmon/log/ERR-$SCCDQ-`date +%Y-%m-%d`.log"
pg $executionErr

}

CLEARRM ()
{
rm -f $FTEMP/*.out rm -f $FTEMP/*.del $FFLOAT >/dev/null ;mv $FTEMP/*.sh $FLOG/ >/dev/null;mv $FSQL $FLOG >/dev/null

}




###MENU
#Here below is a menu where the operator can choose the desired option.


OPTION=1
while [ $OPTION -ne 0 ]
do
clear
echo "             =================================================== "
echo "             ${b1}N E T C O O L   L D S   A D M I N I S T R A T I O N${b2} "
echo "             =================================================== "
echo
echo "             Machine : `hostname`"
echo 
echo "             Login   : $LOGIN"
echo
echo "             [1] - Searching for LDS (device)"
echo "             [2] - Add LDS (device)"
echo "             [3] - Searching LDS Filter"
echo "             [4] - Add LDS Filter"
echo "             [5] - Add Multiple LDSs (device)"
echo
echo "             [X] - EXIT"
echo
printf "             Enter the option : "
read OPTION
case $OPTION in
   1 ) clear;NAME_RM;clear;CHK_NAME;echo;printf " Press <Enter> to continue ";read x ;; 
   2 ) clear;NAME_RM;clear;CHK_LDS_RM;clear;echo;printf " Press <Enter> to continue ";read x ;; 
   3 ) clear;FIND_FILTER_RM;clear;;
   4 ) clear;FL_NAME_RM;clear;printf " Press <Enter> to continue ";read x ;;
   5 ) clear;FILEMLDS;clear;echo;CHECKERR ;;
   X|x ) OPTION=0;CLEARRM ;;
   * ) OPTION=1 ;;
   esac

done
clear
OPTION=9
exit
